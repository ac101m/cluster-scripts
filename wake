#!/usr/bin/env python3


import argparse
from subprocess import call


# Mac addresses for various NICs in the system
nic1_macs = ["68:b5:99:c8:ed:34", "78:E7:D1:61:EF:52", "98:4B:E1:73:92:5A", "78:E7:D1:61:EF:CE", "68:B5:99:B5:39:22"]
nic2_macs = ["68:b5:99:c8:ed:35", "78:E7:D1:61:EF:53", "98:4B:E1:73:92:5B", "78:E7:D1:61:EF:CF", "68:B5:99:B5:39:23"]


def main():

    # Parse command line arguments
    parser = argparse.ArgumentParser(description = 'Wake nodes on the cluster over ethernet.')
    parser.add_argument('-a', '--all', action = 'store_true', default = False, help = 'Wake all cluster nodes.')
    parser.add_argument('-n', '--nodes', type = int, nargs = '+', help = 'Wake the specified nodes in the cluster.')
    parser.add_argument('-c', '--count', type = int, help = 'Wake n nodes in the cluster, in descending order.')
    ARGS = parser.parse_args()

    # Connected nic
    all_macs = nic1_macs
    macs = []

    # User tries to wake all hosts
    if ARGS.all == True:
        macs = all_macs

    # User specified node numbers manually
    elif ARGS.nodes != None:
        for node_number in ARGS.nodes:
            if(node_number < len(all_macs)):
                macs.append(all_macs[node_number])
            else:
                print("Node %d out of range, ignoring." % node_number)

    # User specified a count of nodes
    elif ARGS.count != None:
        macs = all_macs[-ARGS.count:]

    # Nothing specified, do nothing.
    else:
        print("No nodes specified, nothing to be done.")
        return

    # Wake the selected nodes
    for mac in macs:
        call(["wakeonlan", mac])


if __name__ == '__main__':
    main()
