#!/usr/bin/env python3


import sys
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
import argparse


# Builds an argument parser
def setup_opt_parser():
	parser = argparse.ArgumentParser(description = 'Makes charts. What do you want from me?')
	parser.add_argument('-o', '--output', default = 'out.png', help = 'name of file to output.')

	# Chart title and axis labels
	parser.add_argument('-x', '--xlabel', required = True, help = 'Set label for the x axis.')
	parser.add_argument('-y', '--ylabel', required = True, help = 'Set label for the y axis.')
	parser.add_argument('-t', '--title', required = True, help = 'Set title for chart.')

	# Data formatting
	parser.add_argument('-ls', '--limitsamples', default = 10000, type = int,
						help = 'Limit the number of samples used from each file.')
	parser.add_argument('-f', '--files', nargs = '+', required = True,
						help = 'Files to parse data from. First column specifies y axis.')

	# Legend contents and position
	parser.add_argument('-l', '--legend', nargs = '+',
						help = 'Labels for lines derived from chosen files.')
	parser.add_argument('-L', '--legendloc', default = 'upper left',
						help = "Location for the line legend to be displayed at.")
	return parser


# Gets data from Files
def get_data_from_files(file_paths):
	message_size = []
	data = []
	for path in file_paths:
		thisfile_message_size = []
		thisfile_data = []
		print("Parsing %s..." % path)
		with open(path) as data_file:
			for i, line in enumerate(data_file):
				if i == 1:
					print("No file continuity checking done yet, must fix...")
				elif i > 1:
					col_values = list(filter(None, line.strip('\n').split(' ')))
					thisfile_message_size.append(float(col_values[0]))
					thisfile_data.append(float(col_values[1]))
		message_size = thisfile_message_size
		data.append(thisfile_data)
	return message_size, data


# Byte formatter function, might be handy elsewhere...
# Goes up to yottabytes, yes yottabytes.
def byte_eng_formatter(x, pos):
	suffix = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z' 'Y']
	value = float(x)
	i = 0;
	while(value >= 1024):
		value /= 1024
		i += 1
	return '%d%s' % (value, suffix[i])


# Does all the things
def main():
	parser = setup_opt_parser()
	ARGS = parser.parse_args()

	message_size, line_data = get_data_from_files(ARGS.files)

	print("Generating plot...")
	figure = plt.figure()
	axes = figure.add_subplot(1, 1, 1)

	# Plot all the data
	for i, line in enumerate(line_data):
		axes.plot(message_size[:ARGS.limitsamples],
				  line[:ARGS.limitsamples],
				  linewidth = 1.5,
				  linestyle = ':')

	# Add a chart legend if one was specified
	if ARGS.legend != None:
		axes.legend(ARGS.legend, loc = ARGS.legendloc)

	# Put plot formatting here
	plt.grid(which = 'major', axis = 'both', linestyle = ':')
	axes.set_xscale('log', basex = 2)
	axes.set_title(ARGS.title)
	axes.set_xlabel(ARGS.xlabel)
	axes.set_ylabel(ARGS.ylabel)
	formatter = tick.FuncFormatter(byte_eng_formatter)
	axes.xaxis.set_major_formatter(formatter)

	# Save the plot as a png
	print("Saving plot to %s..." % ARGS.output)
	plt.savefig(ARGS.output)


# Start here
if __name__ == '__main__':
	main()
